name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: user_microservice_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run linter
      run: npm run lint
      
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h 127.0.0.1 -u testuser -ptestpassword --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done
        
    - name: Setup database
      run: |
        npm run db:generate
        npm run db:push
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/user_microservice_test
        
    - name: Run tests
      run: npm run test:coverage
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/user_microservice_test
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Build application
      run: npm run build

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for vulnerabilities
      run: npm audit fix --dry-run

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t user-microservice:${{ github.sha }} .
      
    - name: Test Docker image
      run: |
        docker run --rm user-microservice:${{ github.sha }} npm --version
